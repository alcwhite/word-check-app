{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/message/message.component.css","webpack:///./src/app/message/message.component.html","webpack:///./src/app/message/message.component.ts","webpack:///./src/app/text/text.component.css","webpack:///./src/app/text/text.component.html","webpack:///./src/app/text/text.component.ts","webpack:///./src/app/transfer.service.ts","webpack:///./src/app/words/words.component.css","webpack:///./src/app/words/words.component.html","webpack:///./src/app/words/words.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"div.main {\\r\\n  width: 80%;\\r\\n  margin: 0 auto;\\r\\n  height: 100%;\\r\\n  background-color: lightgray;\\r\\n  background-repeat: repeat-y;\\r\\n}\\r\\nh1 {\\r\\n  font-family: Helvetica;\\r\\n  display: block;\\r\\n  width: 80%;\\r\\n  padding: 20px 0;\\r\\n  margin: auto;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"main\\\">\\n  <h1>Word Use Check</h1>\\n  <app-text></app-text>\\n  <app-words></app-words>\\n  <app-message></app-message>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { WordsComponent } from './words/words.component';\nimport { TextComponent } from './text/text.component';\nimport { MessageComponent } from './message/message.component';\n\nimport { TransferService } from './transfer.service';\n\n// make test button change on clicking the word instead of on hover\n// find word usage for overused unknown words -- ???\n// make it recognize forms of a word (-s, -ed, etc.) -- ask if verb or noun, if yes, also check for variations (common ones)\n// make it recognize dashes as word breaks -- add to the split function?\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WordsComponent,\n    TextComponent,\n    MessageComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [TransferService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"button {\\r\\n  display: block;\\r\\n  margin: 15px auto;\\r\\n  border: 2px solid teal;\\r\\n  background-color: paleturquoise;\\r\\n  font-size: 20px;\\r\\n  padding: 5px;\\r\\n  border-radius: 5px;\\r\\n  transition: 0.5s;\\r\\n}\\r\\nbutton:hover {\\r\\n  background-color: teal;\\r\\n  color: white;\\r\\n  transition: 0.5s;\\r\\n}\\r\\np {\\r\\n  font-family: Helvetica;\\r\\n}\\r\\ndiv.message {\\r\\n  width: 80%;\\r\\n  margin: auto;\\r\\n  background-color: RGBA(0, 128, 128, 0.5);\\r\\n  padding: 5px 10px;\\r\\n}\\r\\ndiv.extra-message {\\r\\n  width: 80%;\\r\\n  margin: auto;\\r\\n  background-color: RGBA(175, 238, 238, 0.5);\\r\\n  padding: 5px 10px;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"section\\\">\\n  <button (click)=\\\"showMessage()\\\" (mouseenter)=\\\"setData()\\\" (focus)=\\\"setData()\\\">Test<em *ngIf=\\\"buttonWord\\\">{{' ' + buttonWord}}</em></button>\\n  <div *ngIf=\\\"active\\\" class=\\\"message\\\">\\n    <p>You have used the word \\\"{{ word }}\\\" {{ num }} {{ num === 1 ? \\\"time\\\" : \\\"times\\\" }} in {{ total }} words.</p>\\n    <div *ngIf=\\\"percent >= 0.5\\\" class=\\\"message extra-message\\\">\\n      <p>This constitutes {{ percent }}% of your total word count.</p>\\n      <p *ngIf=\\\"percent > 1\\\">If this is not a name, article, or conjunction, you may want to consider replacing some instances of it.</p>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { TransferService } from '../transfer.service';\n\n@Component({\n  selector: 'app-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.css']\n})\nexport class MessageComponent implements OnInit {\n  word: string;\n  buttonWord: string;\n  checkWord;\n  active: boolean = false;\n  num: number = 0;\n  total: number;\n  text: string;\n  percent: number;\n  constructor(private _transfer: TransferService) { }\n\n  ngOnInit() {\n\n  }\n\n  // triggers when Test button is clicked\n  showMessage = () => {\n    this.word = this._transfer.word;\n    this.text = this._transfer.text;\n    this.total = this._transfer.total;\n    if (this._transfer.active && this.total > 11) {\n      this.active = true;\n    }\n    this.checkWord = new RegExp('\\\\b' + this.word + '\\\\b', 'ig');\n    this.calculateUsage();\n    if (this.total >= 5000) {\n      this.calculatePercent();\n    }\n  }\n\n  // sets variable (for button text)\n  setData = () => {\n    this.buttonWord = this._transfer.word;\n  }\n\n  // calculates number of usages of the chosen word\n  calculateUsage = () => {\n    if (this.text.match(this.checkWord)) {\n      this.num = this.text.match(this.checkWord).length;\n      return this.num;\n    }\n    else {\n      this.num = 0;\n    }\n  }\n\n  // calculates percentage of text that is the chosen word\n  calculatePercent = () => {\n    let decimal = (this.num / this.total) * 100;\n    this.percent = parseFloat(decimal.toFixed(2));\n  }\n\n}\n","module.exports = \"textarea {\\r\\n  width: 80%;\\r\\n  height: 100px;\\r\\n  margin: auto;\\r\\n  display: block;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"section\\\">\\n  <h2>Input text to check word use</h2>\\n  <textarea [(ngModel)]=\\\"text\\\" (ngModelChange)=\\\"inputText()\\\"></textarea>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { TransferService } from '../transfer.service';\n\n@Component({\n  selector: 'app-text',\n  templateUrl: './text.component.html',\n  styleUrls: ['./text.component.css']\n})\nexport class TextComponent implements OnInit {\n  text: string;\n  constructor(private _transfer: TransferService) { }\n\n  ngOnInit() {\n  }\n\n  // sets text variables and sends them across app\n  inputText = () => {\n    this._transfer.text = this.text.trim();\n    if (this.text.trim() === '') {\n      this._transfer.total = 0;\n    } else {\n      this._transfer.total = this.text.trim().split(' ').length;\n    }\n\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransferService {\n  word: string;\n  active: boolean;\n  text: string;\n  total: number;\n  constructor() { }\n\n}\n","module.exports = \".active {\\r\\n  background-color: teal;\\r\\n  color: white;\\r\\n}\\r\\nbutton {\\r\\n  border: 0;\\r\\n  display: inline-block;\\r\\n  margin: 3px;\\r\\n  padding: 7px;\\r\\n  background-color: paleturquoise;\\r\\n  font-family: Helvetica, sans-serif;\\r\\n}\\r\\n.buttons {\\r\\n  width: 80%;\\r\\n  margin: 10px auto;\\r\\n  display: flex;\\r\\n  flex-flow: row wrap;\\r\\n  justify-content: center;\\r\\n\\r\\n}\\r\\nh2 {\\r\\n  font-family: Helvetica;\\r\\n  display: block;\\r\\n  width: 80%;\\r\\n  margin: 10px auto;\\r\\n}\\r\\n.new-word {\\r\\n  width: 80%;\\r\\n  margin: auto;\\r\\n}\\r\\ninput[type=\\\"text\\\"] {\\r\\n  margin-left: 5px;\\r\\n}\\r\\nlabel {\\r\\n  font-family: Helvetica;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"section\\\">\\n  <h2>Select a word to check it</h2>\\n  <div class=\\\"buttons\\\">\\n    <button class=\\\"word-group\\\" *ngFor=\\\"let word of words, let i = index\\\" id=\\\"id{{i}}\\\" (click)=\\\"toggleWord(i)\\\">{{word}}</button>\\n  </div>\\n  <div class=\\\"new-word\\\">\\n    <label for=\\\"new-word\\\">Add a new word:</label>\\n    <input type=\\\"text\\\" id=\\\"new-word\\\" value=\\\"''\\\" [(ngModel)]=\\\"newWord\\\" (keyup.enter)=\\\"addWord(newWord)\\\">\\n    <input type=\\\"submit\\\" value=\\\"Add\\\" (click)=\\\"addWord(newWord)\\\">\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { TransferService } from '../transfer.service';\n\n@Component({\n  selector: 'app-words',\n  templateUrl: './words.component.html',\n  styleUrls: ['./words.component.css']\n})\nexport class WordsComponent implements OnInit {\n\n  constructor(private _transfer: TransferService) { }\n\n  // default words to check\n  words: string[] = [\n    \"often\",\n    \"very\",\n    \"really\",\n    \"just\",\n    \"somewhat\",\n    \"quite\",\n    \"basically\",\n    \"then\",\n    \"actually\"\n  ];\n  newWord: string;\n  word: string;\n  ngOnInit() {\n  }\n\n  // adds new word to check\n  addWord = (word) => {\n    word = word.toLowerCase().trim();\n    if (this.words.indexOf(word) === -1 && word !== \"\") {\n      this.words.push(word);\n    }\n    this.newWord = '';\n  }\n\n  // chooses which word to check\n  toggleWord = (index) => {\n    let thisWord = document.getElementById(\"id\" + index);\n    for (let i = 0; i < this.words.length; i++) {\n      let eachWord = document.getElementById(\"id\" + i);\n      if (eachWord.classList.contains(\"active\")) {\n        eachWord.classList.remove(\"active\");\n      }\n    }\n    thisWord.classList.add(\"active\");\n    this.word = thisWord.innerHTML;\n    this._transfer.word = this.word;\n    this._transfer.active = true;\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}